{
  "version": 3,
  "names": [],
  "mappings": "",
  "sources": [
    "Edit.js"
  ],
  "sourcesContent": [
    "/* globals jQuery, parseInt */\ndefine([\n\t'jquery',\n\t'TYPO3/CMS/Sessionplaner/DragDrop',\n\t'TYPO3/CMS/Backend/Modal',\n\t'TYPO3/CMS/Backend/Severity'\n], function ($, dragDrop, modal, Severity) {\n\t'use strict';\n\n\tfunction Sessionplaner() {\n\t\tthis.pageId = 0;\n\t\tthis.uiBlock = null;\n\t\tthis.stash = null;\n\t\tthis.gridButtonGroup = null;\n\t\tthis.gridNewSessionButton = null;\n\t\tthis.sessionData = {};\n\t\tthis.ajaxActive = false;\n\t\tthis.dragActive = false;\n\n\t\tthis.initialize();\n\t}\n\n\tSessionplaner.prototype.setPageId = function (pageId) {\n\t\tthis.pageId = pageId;\n\t};\n\n\t/**\n\t * @param {string} id\n\t *\n\t * @return {object}\n\t */\n\tSessionplaner.prototype.getTemplateElement = function (id) {\n\t\treturn $($('#' + id).html().replace(/^\\s+|\\s+$/g, ''));\n\t};\n\n\t/**\n\t * @param {object} serializedData\n\t *\n\t * @return {object}\n\t */\n\tSessionplaner.prototype.prepareData = function (serializedData) {\n\t\tlet data = {};\n\n\t\t$.each(serializedData, function(index, fieldNameAndValue) {\n\t\t\tif (fieldNameAndValue.name === 'attendees'\n\t\t\t\t|| fieldNameAndValue.name === 'type'\n\t\t\t\t|| fieldNameAndValue.name === 'level'\n\t\t\t\t|| fieldNameAndValue.name === 'day'\n\t\t\t\t|| fieldNameAndValue.name === 'room'\n\t\t\t\t|| fieldNameAndValue.name === 'slot'\n\t\t\t) {\n\t\t\t\tfieldNameAndValue.value = parseInt(fieldNameAndValue.value) || 0;\n\t\t\t}\n\t\t\tdata[fieldNameAndValue.name] = fieldNameAndValue.value;\n\t\t});\n\n\t\treturn data;\n\t};\n\n\t/**\n\t * @param {object} $form\n\t * @param {object} sessionData\n\t *\n\t * @returns {object}\n\t */\n\tSessionplaner.prototype.applySessionValuesToForm = function ($form, sessionData) {\n\t\t$.each(sessionData, function(index, value) {\n\t\t\tlet $element = $('input.' + index + ':first', $form);\n\t\t\tif ($element.length > 0) {\n\t\t\t\t$element.val(value);\n\t\t\t}\n\t\t});\n\n\t\treturn $form;\n\t};\n\n\t/**\n\t * @param {object} $card\n\t * @param {object} sessionData\n\t *\n\t * @return {object}\n\t */\n\tSessionplaner.prototype.applySessionValuesToCard = function ($card, sessionData) {\n\t\tlet $sessionCard = $card.find('.t3-page-ce-body-inner');\n\n\t\t$.each(sessionData, function(index, value) {\n\t\t\t$('.' + index, $sessionCard)\n\t\t\t\t.data('value', value)\n\t\t\t\t.text(value);\n\t\t});\n\n\t\treturn $card;\n\t};\n\n\t/**\n\t * @param {object} sessionData\n\t * @param {object} $cardParent\n\t *\n\t * @returns {object}\n\t */\n\tSessionplaner.prototype.addValuesFromParent = function (sessionData, $cardParent) {\n\t\tif ($cardParent.attr('id') === 'stash') {\n\t\t\tsessionData.slot = 0;\n\t\t\tsessionData.room = 0;\n\t\t} else {\n\t\t\tsessionData.slot = $cardParent.data('slot');\n\t\t\tsessionData.room = $cardParent.data('room');\n\t\t}\n\n\t\treturn sessionData;\n\t};\n\n\t/**\n\t * Create session card\n\t *\n\t * @param {object} sessionData\n\t *\n\t * @return {object}\n\t */\n\tSessionplaner.prototype.createSessionCard = function (sessionData) {\n\t\tlet $card = this.getTemplateElement('sessionCardTemplate');\n\n\t\treturn this.applySessionValuesToCard($card, sessionData);\n\t};\n\n\t/**\n\t * @param {object} sessionData\n\t */\n\tSessionplaner.prototype.updateSessionCard = function (sessionData) {\n\t\tlet $card = $('.uid[data-value=\"' + sessionData.uid + '\"]', '.t3js-page-ce').parents('.t3js-page-ce');\n\n\t\tthis.applySessionValuesToCard($card, sessionData);\n\t};\n\n\t/**\n\t * @param {object} card\n\t *\n\t * @returns {object}\n\t */\n\tSessionplaner.prototype.getDataFromCard = function (card) {\n\t\tlet $sessionCard = $(card).find('.t3-page-ce-body-inner'),\n\t\t\tdata = {};\n\n\t\t$sessionCard.find('.property').each(function() {\n\t\t\tlet $element = $(this);\n\t\t\tdata[$element.data('name')] = $element.data('value');\n\t\t});\n\n\t\treturn data;\n\t};\n\n\n\t/**\n\t * @param {object} response\n\t */\n\tSessionplaner.prototype.createSessionSuccess = function (response) {\n\t\tthis.sessionData.uid = response.data.uid;\n\n\t\tlet $card = this.createSessionCard(this.sessionData);\n\t\tif (this.sessionData.room && this.sessionData.slot) {\n\t\t\t$('[data-room=\"' + this.sessionData.room + '\"][data-slot=\"' + this.sessionData.slot + '\"]').prepend($card);\n\t\t} else {\n\t\t\tthis.stash.prepend($card);\n\t\t}\n\n\t\tdragDrop.initializeDraggable($card);\n\t};\n\n\tSessionplaner.prototype.updateSessionSuccess = function () {\n\t\tthis.updateSessionCard(this.sessionData);\n\t};\n\n\tSessionplaner.prototype.movedSessionSuccess = function () {\n\t};\n\n\tSessionplaner.prototype.deleteSessionSuccess = function () {\n\t\tlet self = this;\n\t\t$('[data-name=\"uid\"]').each(function () {\n\t\t\tlet $element = $(this);\n\t\t\tif (parseInt($element.data('value')) === self.sessionData.uid) {\n\t\t\t\t$element.parents('.t3-page-ce').remove();\n\t\t\t}\n\t\t});\n\t};\n\n\n\t/**\n\t * @return {boolean}\n\t */\n\tSessionplaner.prototype.beforeSend = function () {\n\t\tlet result = true;\n\n\t\tif (!this.ajaxActive) {\n\t\t\tthis.ajaxActive = true;\n\n\t\t\tthis.uiBlock.removeClass('hidden');\n\t\t} else {\n\t\t\tresult = false;\n\t\t}\n\n\t\treturn result;\n\t};\n\n\tSessionplaner.prototype.afterSend = function () {\n\t\tthis.uiBlock.addClass('hidden');\n\n\t\tthis.ajaxActive = false;\n\t};\n\n\tSessionplaner.prototype.sendAjaxRequest = function (ajaxUrlKey, sessionData, doneCallback) {\n\t\tlet self = this;\n\n\t\t$.ajax(TYPO3.settings.ajaxUrls[ajaxUrlKey], {\n\t\t\tmethod: 'post',\n\t\t\tbeforeSend: function () { self.beforeSend(); },\n\t\t\tcomplete: function () { self.afterSend(); },\n\t\t\tdata: {\n\t\t\t\tid: self.pageId,\n\t\t\t\ttx_sessionplaner: {\n\t\t\t\t\tsession: sessionData\n\t\t\t\t}\n\t\t\t}\n\t\t}).done(doneCallback);\n\t};\n\n\t/**\n\t * @param {object} event\n\t */\n\tSessionplaner.prototype.createSession = function (event) {\n\t\tlet self = this;\n\t\tthis.sessionData = this.prepareData($('form', event.target).serializeArray());\n\n\t\tthis.sendAjaxRequest(\n\t\t\t'evoweb_sessionplaner_create',\n\t\t\tthis.sessionData,\n\t\t\tfunction (data) {\n\t\t\t\tself.createSessionSuccess(data);\n\t\t\t}\n\t\t);\n\t};\n\n\t/**\n\t * @param {object} event\n\t */\n\tSessionplaner.prototype.updateSession = function (event) {\n\t\tlet self = this,\n\t\t\tupdateSessionData = this.prepareData($('form', event.target).serializeArray());\n\t\tupdateSessionData.uid = this.sessionData.uid;\n\t\tthis.sessionData = updateSessionData;\n\n\t\tthis.sendAjaxRequest(\n\t\t\t'evoweb_sessionplaner_update',\n\t\t\tthis.sessionData,\n\t\t\tfunction (data) {\n\t\t\t\tself.updateSessionSuccess(data);\n\t\t\t}\n\t\t);\n\t};\n\n\t/**\n\t * @param {object} element\n\t */\n\tSessionplaner.prototype.deleteSession = function (element) {\n\t\tlet self = this;\n\t\tthis.sessionData = { uid: $(element).parents('.t3-page-ce').find('.uid').data('value') };\n\n\t\tthis.sendAjaxRequest(\n\t\t\t'evoweb_sessionplaner_delete',\n\t\t\tthis.sessionData,\n\t\t\tfunction (data) {\n\t\t\t\tself.deleteSessionSuccess(data);\n\t\t\t}\n\t\t);\n\t};\n\n\t/**\n\t * @param {object} $movedElement\n\t * @param {object} $droppedOnElement\n\t */\n\tSessionplaner.prototype.movedSession = function ($movedElement, $droppedOnElement) {\n\t\tlet self = this,\n\t\t\tmovedSessionData = this.getDataFromCard($movedElement);\n\t\tthis.sessionData = this.addValuesFromParent(movedSessionData, $droppedOnElement);\n\n\t\tthis.sendAjaxRequest(\n\t\t\t'evoweb_sessionplaner_update',\n\t\t\tthis.sessionData,\n\t\t\tfunction (data) {\n\t\t\t\tself.movedSessionSuccess(data);\n\t\t\t}\n\t\t);\n\t};\n\n\n\tSessionplaner.prototype.createNewSessionForm = function () {\n\t\tlet self = this;\n\t\tthis.sessionData = {};\n\n\t\tmodal.confirm(\n\t\t\t'Create session',\n\t\t\tthis.applySessionValuesToForm(\n\t\t\t\tthis.getTemplateElement('sessionFormTemplate'),\n\t\t\t\tthis.sessionData\n\t\t\t),\n\t\t\tSeverity.ok,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttext: 'Create session',\n\t\t\t\t\tactive: true,\n\t\t\t\t\tbtnClass: 'btn-default',\n\t\t\t\t\tname: 'ok'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttext: 'Cancel',\n\t\t\t\t\tactive: true,\n\t\t\t\t\tbtnClass: 'btn-default',\n\t\t\t\t\tname: 'cancel'\n\t\t\t\t}\n\t\t\t]\n\t\t).on('button.clicked', function() {\n\t\t\tmodal.dismiss();\n\t\t}).on('confirm.button.ok', function (event) { self.createSession(event); });\n\t};\n\n\tSessionplaner.prototype.createNewSessionFormInGrid = function () {\n\t\tlet self = this;\n\n\t\tmodal.confirm(\n\t\t\t'Create session',\n\t\t\tthis.applySessionValuesToForm(\n\t\t\t\tthis.getTemplateElement('sessionFormTemplate'),\n\t\t\t\tthis.sessionData\n\t\t\t),\n\t\t\tSeverity.ok,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttext: 'Create session',\n\t\t\t\t\tactive: true,\n\t\t\t\t\tbtnClass: 'btn-default',\n\t\t\t\t\tname: 'ok'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttext: 'Cancel',\n\t\t\t\t\tactive: true,\n\t\t\t\t\tbtnClass: 'btn-default',\n\t\t\t\t\tname: 'cancel'\n\t\t\t\t}\n\t\t\t]\n\t\t).on('button.clicked', function() {\n\t\t\tmodal.dismiss();\n\t\t}).on('confirm.button.ok', function (event) { self.createSession(event); });\n\t};\n\n\tSessionplaner.prototype.editSession = function (element) {\n\t\tlet self = this;\n\t\tthis.sessionData = this.getDataFromCard(element);\n\n\t\tmodal.confirm(\n\t\t\t'Edit session',\n\t\t\tthis.applySessionValuesToForm(\n\t\t\t\tthis.getTemplateElement('sessionFormTemplate'),\n\t\t\t\tthis.sessionData\n\t\t\t),\n\t\t\tSeverity.ok,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttext: 'Update session',\n\t\t\t\t\tactive: true,\n\t\t\t\t\tbtnClass: 'btn-default',\n\t\t\t\t\tname: 'ok'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttext: 'Cancel',\n\t\t\t\t\tactive: true,\n\t\t\t\t\tbtnClass: 'btn-default',\n\t\t\t\t\tname: 'cancel'\n\t\t\t\t}\n\t\t\t]\n\t\t).on('button.clicked', function() {\n\t\t\tmodal.dismiss();\n\t\t}).on('confirm.button.ok', function (event) { self.updateSession(event); });\n\t};\n\n\tSessionplaner.prototype.mouseOver = function (element) {\n\t\tlet $element = $(element);\n\t\tthis.sessionData = {\n\t\t\troom: $element.data('room'),\n\t\t\tslot: $element.data('slot')\n\t\t};\n\t\tif (!this.dragActive && $element.children().length === 0) {\n\t\t\tthis.gridNewSessionButton.appendTo($element);\n\t\t}\n\t};\n\n\tSessionplaner.prototype.mouseOut = function (element, event) {\n\t\tlet e = event.toElement || event.relatedTarget;\n\t\tif (e === null\n\t\t\t|| e === element\n\t\t\t|| e.parentNode === element\n\t\t\t|| e.parentNode.parentNode === element\n\t\t\t|| e.parentNode.parentNode.parentNode === element\n\t\t\t|| e.parentNode.parentNode.parentNode.parentNode === element) {\n\t\t\treturn;\n\t\t}\n\t\tthis.gridNewSessionButton.appendTo(this.gridButtonGroup);\n\t};\n\n\t/**\n\t * Hook into drop stop to store moving the session\n\t */\n\tSessionplaner.prototype.initializeDragAndDrop = function () {\n\t\tlet self = this,\n\t\t\toriginalDragStart = dragDrop.onDragStart,\n\t\t\toriginalDrop = dragDrop.onDrop;\n\n\t\tdragDrop.onDragStart = function ($draggableElement) {\n\t\t\tself.dragActive = true;\n\t\t\toriginalDragStart($draggableElement);\n\t\t};\n\n\t\tdragDrop.onDrop = function ($draggableElement, $dropAbleElement, event) {\n\t\t\tself.movedSession($draggableElement, $dropAbleElement);\n\t\t\toriginalDrop($draggableElement, $dropAbleElement, event);\n\t\t\tself.dragActive = false;\n\t\t}\n\t};\n\n\tSessionplaner.prototype.initialize = function () {\n\t\tlet self = this;\n\n\t\tthis.uiBlock = $('#t3js-ui-block');\n\t\tthis.stash = $('#stash');\n\t\tthis.gridButtonGroup = $('#gridButtonGroup');\n\t\tthis.gridNewSessionButton = this.gridButtonGroup.find('#actions-document-new-in-grid');\n\n\t\t$(document)\n\t\t\t.on('click', '#actions-document-new', function () { self.createNewSessionForm(); })\n\t\t\t.on('click', '#actions-document-new-in-grid', function () { self.createNewSessionFormInGrid(); })\n\t\t\t.on('click', '.icon-actions-edit-delete', function () { self.deleteSession(this); })\n\t\t\t.on('dblclick', '.t3js-page-ce', function () { self.editSession(this); })\n\t\t\t.on('mouseover', '.t3js-grid-cell', function () { self.mouseOver(this); })\n\t\t\t.on('mouseout', '.t3js-grid-cell', function (event) { self.mouseOut(this, event); });\n\n\t\tthis.initializeDragAndDrop();\n\t};\n\n\treturn new Sessionplaner();\n});\n"
  ],
  "file": "Edit.js"
}
